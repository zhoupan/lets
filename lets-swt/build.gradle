/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
  id 'java-library-conventions'
}
var swtVersion = "3.125.0"
dependencies {
  implementation project(":lets-core")
  implementation project(":lets-webview")
  implementation libs.swt
  implementation libs.jface
  implementation libs.jface.text
  // https://storage.googleapis.com/equo-chromium-swt-ce/oss/mvn/index.html
  // implementation 'com.equo:com.equo.chromium:116.0.0'
  // implementation 'com.equo:com.equo.chromium.cef.cocoa.macosx.x86_64:124.0.0'
  // implementation 'com.equo:com.equo.chromium.cef.gtk.linux.x86_64:124.0.0'
  // implementation 'com.equo:com.equo.chromium.cef.win32.win32.x86_64:116.0.0'

}
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}
configurations.all {
  resolutionStrategy {
    dependencySubstitution {
      def os = System.getProperty("os.name").toLowerCase()
      def arch = System.getProperty("os.arch").toLowerCase()
      if (os.contains("windows")) {
        substitute(module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}')).using(module("org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:${swtVersion}"))
      } else if (os.contains("linux")) {
        if (arch.contains('aarch64')) {
          substitute(module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}')).using(module("org.eclipse.platform:org.eclipse.swt.gtk.linux.aarch64:${swtVersion}"))
        } else {
          substitute(module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}')).using(module("org.eclipse.platform:org.eclipse.swt.gtk.linux.x86_64:${swtVersion}"))
        }
      } else if (os.contains("mac")) {
        if (arch.contains('aarch64')) {
          substitute(module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}')).using(module("org.eclipse.platform:org.eclipse.swt.cocoa.macosx.aarch64:${swtVersion}"))
        } else {
          substitute(module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}')).using(module("org.eclipse.platform:org.eclipse.swt.cocoa.macosx.x86_64:${swtVersion}"))
        }
      }
    }
  }
}

task runHelloBrowser(type: JavaExec) {
  group = "Execution"
  description = "Run the main class with JavaExecTask"
  classpath = sourceSets.main.runtimeClasspath
  main = "lets.swt.examples.HelloBrowser"
}

task runHelloWebview(type: JavaExec) {
  group = "Execution"
  description = "Run the main class with JavaExecTask"
  classpath = sourceSets.main.runtimeClasspath
  main = "lets.swt.examples.HelloWebview"
}
