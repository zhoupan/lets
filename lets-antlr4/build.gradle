/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
  id 'java-application-conventions'
  id 'org.graalvm.buildtools.native' version '0.10.1'
}
// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}
// https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html

graalvmNative {
  //Enabling toolchain detection
  //toolchainDetection = true
  testSupport = false
  // required for older GraalVM releases
  useArgFile = false
  binaries {
    main {
      useFatJar = true
      // Build a Native Executable with Resources Autodetection
      // Configuring the graalvmNative plugin to automatically detect resources (resources.autodetect())
      // to be included in a binary is one way to make this example work.
      // Using resources.autodetect() works
      // when the application uses resources which are directly available
      // in the src/main/resources location.
      // resources.autodetect()

      // Build a Native Executable by Detecting Resources with the Agent
      // gradlew -Pagent :lets-antlr4:run
      // gradlew -Pagent :lets-antlr4:run --args="e:\target\velocity\VTLLexer.g4 -package lang -visitor -Dlanguage=Go"
      // gradlew :lets-antlr4:metadataCopy --task run --dir src/main/resources/META-INF/native-image
      // gradlew :lets-antlr4:nativeCompile
    }
  }

}
dependencies {
  // This dependency is used by the application.
  // implementation libs.guava
  implementation libs.antlr4
  implementation libs.slf4j.api
  implementation libs.jodd.core
  implementation project(':lets-core')
}

application {
  // Define the main class for the application.
  mainClass = 'lets.antlr4.LetsAntlr4Main'
}

task agentRun(type: Exec) {
  workingDir project.rootProject.rootDir
  commandLine 'cmd', '/c', 'gradlew.bat', '-Pagent', ':lets-antlr4:run'
}
task agentCopy(type: Exec, dependsOn: agentRun) {
  workingDir project.rootProject.rootDir
  commandLine 'cmd', '/c', 'gradlew.bat', ':lets-antlr4:metadataCopy', '--task', 'run', '--dir', 'src/main/resources/META-INF/native-image'
}
task agentCompile(type: Exec, dependsOn: agentCopy) {
  workingDir project.rootProject.rootDir
  commandLine 'cmd', '/c', 'gradlew.bat', ':lets-antlr4:nativeCompile'
}
