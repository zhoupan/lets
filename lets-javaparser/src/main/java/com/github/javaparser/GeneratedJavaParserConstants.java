/*
 * Copyright (c) 2007-2010 zhoupan (https://github.com/zhoupan).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package com.github.javaparser;

/**
 * Token literal values and constants. Generated by
 * com.helger.pgcc.output.java.OtherFilesGenJava#start()
 */
public interface GeneratedJavaParserConstants {

  /** End of File. */
  int EOF = 0;

  /** RegularExpression Id. */
  int SPACE = 1;

  /** RegularExpression Id. */
  int WINDOWS_EOL = 2;

  /** RegularExpression Id. */
  int UNIX_EOL = 3;

  /** RegularExpression Id. */
  int OLD_MAC_EOL = 4;

  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;

  /** RegularExpression Id. */
  int ENTER_JAVADOC_COMMENT = 6;

  /** RegularExpression Id. */
  int ENTER_MULTILINE_COMMENT = 7;

  /** RegularExpression Id. */
  int JAVADOC_COMMENT = 8;

  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 9;

  /** RegularExpression Id. */
  int COMMENT_CONTENT = 10;

  /** RegularExpression Id. */
  int ABSTRACT = 11;

  /** RegularExpression Id. */
  int ASSERT = 12;

  /** RegularExpression Id. */
  int BOOLEAN = 13;

  /** RegularExpression Id. */
  int BREAK = 14;

  /** RegularExpression Id. */
  int BYTE = 15;

  /** RegularExpression Id. */
  int CASE = 16;

  /** RegularExpression Id. */
  int CATCH = 17;

  /** RegularExpression Id. */
  int CHAR = 18;

  /** RegularExpression Id. */
  int CLASS = 19;

  /** RegularExpression Id. */
  int CONST = 20;

  /** RegularExpression Id. */
  int CONTINUE = 21;

  /** RegularExpression Id. */
  int _DEFAULT = 22;

  /** RegularExpression Id. */
  int DO = 23;

  /** RegularExpression Id. */
  int DOUBLE = 24;

  /** RegularExpression Id. */
  int ELSE = 25;

  /** RegularExpression Id. */
  int ENUM = 26;

  /** RegularExpression Id. */
  int EXTENDS = 27;

  /** RegularExpression Id. */
  int FALSE = 28;

  /** RegularExpression Id. */
  int FINAL = 29;

  /** RegularExpression Id. */
  int FINALLY = 30;

  /** RegularExpression Id. */
  int FLOAT = 31;

  /** RegularExpression Id. */
  int FOR = 32;

  /** RegularExpression Id. */
  int GOTO = 33;

  /** RegularExpression Id. */
  int IF = 34;

  /** RegularExpression Id. */
  int IMPLEMENTS = 35;

  /** RegularExpression Id. */
  int IMPORT = 36;

  /** RegularExpression Id. */
  int INSTANCEOF = 37;

  /** RegularExpression Id. */
  int INT = 38;

  /** RegularExpression Id. */
  int INTERFACE = 39;

  /** RegularExpression Id. */
  int LONG = 40;

  /** RegularExpression Id. */
  int NATIVE = 41;

  /** RegularExpression Id. */
  int NEW = 42;

  /** RegularExpression Id. */
  int NON_SEALED = 43;

  /** RegularExpression Id. */
  int NULL = 44;

  /** RegularExpression Id. */
  int PACKAGE = 45;

  /** RegularExpression Id. */
  int PERMITS = 46;

  /** RegularExpression Id. */
  int PRIVATE = 47;

  /** RegularExpression Id. */
  int PROTECTED = 48;

  /** RegularExpression Id. */
  int PUBLIC = 49;

  /** RegularExpression Id. */
  int RECORD = 50;

  /** RegularExpression Id. */
  int RETURN = 51;

  /** RegularExpression Id. */
  int SEALED = 52;

  /** RegularExpression Id. */
  int SHORT = 53;

  /** RegularExpression Id. */
  int STATIC = 54;

  /** RegularExpression Id. */
  int STRICTFP = 55;

  /** RegularExpression Id. */
  int SUPER = 56;

  /** RegularExpression Id. */
  int SWITCH = 57;

  /** RegularExpression Id. */
  int SYNCHRONIZED = 58;

  /** RegularExpression Id. */
  int THIS = 59;

  /** RegularExpression Id. */
  int THROW = 60;

  /** RegularExpression Id. */
  int THROWS = 61;

  /** RegularExpression Id. */
  int TRANSIENT = 62;

  /** RegularExpression Id. */
  int TRUE = 63;

  /** RegularExpression Id. */
  int TRY = 64;

  /** RegularExpression Id. */
  int VOID = 65;

  /** RegularExpression Id. */
  int VOLATILE = 66;

  /** RegularExpression Id. */
  int WHILE = 67;

  /** RegularExpression Id. */
  int YIELD = 68;

  /** RegularExpression Id. */
  int REQUIRES = 69;

  /** RegularExpression Id. */
  int TO = 70;

  /** RegularExpression Id. */
  int WITH = 71;

  /** RegularExpression Id. */
  int OPEN = 72;

  /** RegularExpression Id. */
  int OPENS = 73;

  /** RegularExpression Id. */
  int USES = 74;

  /** RegularExpression Id. */
  int MODULE = 75;

  /** RegularExpression Id. */
  int EXPORTS = 76;

  /** RegularExpression Id. */
  int PROVIDES = 77;

  /** RegularExpression Id. */
  int TRANSITIVE = 78;

  /** RegularExpression Id. */
  int WHEN = 79;

  /** RegularExpression Id. */
  int LONG_LITERAL = 80;

  /** RegularExpression Id. */
  int INTEGER_LITERAL = 81;

  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 82;

  /** RegularExpression Id. */
  int HEX_LITERAL = 83;

  /** RegularExpression Id. */
  int OCTAL_LITERAL = 84;

  /** RegularExpression Id. */
  int BINARY_LITERAL = 85;

  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 86;

  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 87;

  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 88;

  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 89;

  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 90;

  /** RegularExpression Id. */
  int HEX_DIGITS = 91;

  /** RegularExpression Id. */
  int UNICODE_ESCAPE = 92;

  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 93;

  /** RegularExpression Id. */
  int STRING_LITERAL = 94;

  /** RegularExpression Id. */
  int ENTER_TEXT_BLOCK = 95;

  /** RegularExpression Id. */
  int TEXT_BLOCK_LITERAL = 96;

  /** RegularExpression Id. */
  int TEXT_BLOCK_CONTENT = 97;

  /** RegularExpression Id. */
  int IDENTIFIER = 98;

  /** RegularExpression Id. */
  int LETTER = 99;

  /** RegularExpression Id. */
  int PART_LETTER = 100;

  /** RegularExpression Id. */
  int LPAREN = 101;

  /** RegularExpression Id. */
  int RPAREN = 102;

  /** RegularExpression Id. */
  int LBRACE = 103;

  /** RegularExpression Id. */
  int RBRACE = 104;

  /** RegularExpression Id. */
  int LBRACKET = 105;

  /** RegularExpression Id. */
  int RBRACKET = 106;

  /** RegularExpression Id. */
  int SEMICOLON = 107;

  /** RegularExpression Id. */
  int COMMA = 108;

  /** RegularExpression Id. */
  int DOT = 109;

  /** RegularExpression Id. */
  int ELLIPSIS = 110;

  /** RegularExpression Id. */
  int AT = 111;

  /** RegularExpression Id. */
  int DOUBLECOLON = 112;

  /** RegularExpression Id. */
  int ASSIGN = 113;

  /** RegularExpression Id. */
  int LT = 114;

  /** RegularExpression Id. */
  int BANG = 115;

  /** RegularExpression Id. */
  int TILDE = 116;

  /** RegularExpression Id. */
  int HOOK = 117;

  /** RegularExpression Id. */
  int COLON = 118;

  /** RegularExpression Id. */
  int ARROW = 119;

  /** RegularExpression Id. */
  int EQ = 120;

  /** RegularExpression Id. */
  int GE = 121;

  /** RegularExpression Id. */
  int LE = 122;

  /** RegularExpression Id. */
  int NE = 123;

  /** RegularExpression Id. */
  int SC_AND = 124;

  /** RegularExpression Id. */
  int SC_OR = 125;

  /** RegularExpression Id. */
  int INCR = 126;

  /** RegularExpression Id. */
  int DECR = 127;

  /** RegularExpression Id. */
  int PLUS = 128;

  /** RegularExpression Id. */
  int MINUS = 129;

  /** RegularExpression Id. */
  int STAR = 130;

  /** RegularExpression Id. */
  int SLASH = 131;

  /** RegularExpression Id. */
  int BIT_AND = 132;

  /** RegularExpression Id. */
  int BIT_OR = 133;

  /** RegularExpression Id. */
  int XOR = 134;

  /** RegularExpression Id. */
  int REM = 135;

  /** RegularExpression Id. */
  int LSHIFT = 136;

  /** RegularExpression Id. */
  int PLUSASSIGN = 137;

  /** RegularExpression Id. */
  int MINUSASSIGN = 138;

  /** RegularExpression Id. */
  int STARASSIGN = 139;

  /** RegularExpression Id. */
  int SLASHASSIGN = 140;

  /** RegularExpression Id. */
  int ANDASSIGN = 141;

  /** RegularExpression Id. */
  int ORASSIGN = 142;

  /** RegularExpression Id. */
  int XORASSIGN = 143;

  /** RegularExpression Id. */
  int REMASSIGN = 144;

  /** RegularExpression Id. */
  int LSHIFTASSIGN = 145;

  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 146;

  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 147;

  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 148;

  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 149;

  /** RegularExpression Id. */
  int GT = 150;

  /** RegularExpression Id. */
  int CTRL_Z = 151;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Lexical state. */
  int IN_JAVADOC_COMMENT = 1;

  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Lexical state. */
  int IN_TEXT_BLOCK = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SPACE>",
    "\"\\r\\n\"",
    "\"\\n\"",
    "\"\\r\"",
    "<SINGLE_LINE_COMMENT>",
    "<ENTER_JAVADOC_COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "\"*/\"",
    "<COMMENT_CONTENT>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"non-sealed\"",
    "\"null\"",
    "\"package\"",
    "\"permits\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"record\"",
    "\"return\"",
    "\"sealed\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"yield\"",
    "\"requires\"",
    "\"to\"",
    "\"with\"",
    "\"open\"",
    "\"opens\"",
    "\"uses\"",
    "\"module\"",
    "\"exports\"",
    "\"provides\"",
    "\"transitive\"",
    "\"when\"",
    "<LONG_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<HEX_DIGITS>",
    "<UNICODE_ESCAPE>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"\\\"\\\"\\\"\"",
    "\"\\\"\\\"\\\"\"",
    "<TEXT_BLOCK_CONTENT>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"...\"",
    "\"@\"",
    "\"::\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"->\"",
    "\"==\"",
    "\">=\"",
    "\"<=\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"\\u001a\"",
  };
}
